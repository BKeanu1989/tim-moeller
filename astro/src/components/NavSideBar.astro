---
import Xing from "../assets/xing.svg";
import Github from "../assets/github.svg";
import Facebook from "../assets/facebook.svg";
import LinkedIn from "../assets/linkedin.svg";
import Twitter from "../assets/twitter.svg";
import Copyright from "../assets/copyright.svg";
// import Home from "../assets/home-1.svg";
import Home from "../assets/home-1.svg";
import User from "../assets/user.svg";
import BookStudy from "../assets/book-study.svg";
import Message from "../assets/message.svg";
import LanguagePicker from "./LanguagePicker.astro";
import { getLangFromUrl, useTranslations } from "src/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const pathname = new URL(Astro.request.url).pathname;
const splittedPathName = pathname.split("/");
const currentPath = splittedPathName[splittedPathName.length - 1];

const currentYear = new Date().getFullYear();
---

<!-- Mobile Menu Button -->
<button
  id="mobile-menu-button"
  class="lg:hidden fixed top-4 right-4 z-[100] bg-gray-800/80 backdrop-blur-sm p-2 rounded-lg text-white hover:bg-gray-700/80 transition-colors"
  aria-label="Toggle Menu"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path id="menu-icon" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    <path id="close-icon" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
  </svg>
</button>

<!-- Overlay -->
<div id="sidebar-overlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-[90] lg:hidden hidden"></div>

<!-- Sidebar -->
<aside id="sidebar" class="transform -translate-x-full lg:translate-x-0 fixed top-0 left-0 h-dvh w-72 bg-gray-900/95 backdrop-blur-md transition-transform duration-300 ease-in-out z-[95] flex flex-col">
  <div class="flex flex-col h-full px-6 overflow-y-auto">
    <!-- Header -->
    <header class="py-8 text-center border-b border-gray-700/50">
      <h1 class="text-2xl font-light text-white">Tim Julian MÃ¶ller</h1>
    </header>

    <!-- Navigation -->
    <nav class="flex-1 py-8">
      <ul class="space-y-4">
        <li>
          <a 
            href={`/${lang}/`}
            class:list={[
              "flex items-center gap-3 px-4 py-3 rounded-lg transition-colors",
              "hover:bg-gray-800/50",
              currentPath === "" ? "bg-cyan-500/10 text-white" : "text-gray-300"
            ]}
          >
            <Home class="w-6 h-6" />
            <!-- <Fragment set:html={Home} class="w-6 h-6" /> -->
            <span>{t("nav.home")}</span>
          </a>
        </li>
        <li>
          <a 
            href={`/${lang}/about`}
            class:list={[
              "flex items-center gap-3 px-4 py-3 rounded-lg transition-colors",
              "hover:bg-gray-800/50",
              currentPath === "about" ? "bg-cyan-500/10 text-white" : "text-gray-300"
            ]}
          >
            <User class="w-6 h-6" />
            <span>{t("nav.about")}</span>
          </a>
        </li>
        <li>
          <a 
            href={`/${lang}/publications-projects`}
            class:list={[
              "flex items-center gap-3 px-4 py-3 rounded-lg transition-colors",
              "hover:bg-gray-800/50",
              currentPath === "publications" ? "bg-cyan-500/10 text-white" : "text-gray-300"
            ]}
          >
            <BookStudy class="w-6 h-6 fill-white" />
            <span>{t("nav.projects")} & {t("nav.publications")}</span>
          </a>
        </li>
        <li>
          <a 
            href={`/${lang}/contact`}
            class:list={[
              "flex items-center gap-3 px-4 py-3 rounded-lg transition-colors",
              "hover:bg-gray-800/50",
              currentPath === "contact" ? "bg-cyan-500/10 text-white" : "text-gray-300"
            ]}
          >
            <Message class="w-6 h-6 fill-white" />
            <span>{t("nav.contact")}</span>
          </a>
        </li>
      </ul>
    </nav>

    <!-- Footer -->
    <footer class="py-8 border-t border-gray-700/50 space-y-6">
      <!-- Language Picker -->
      <div class="px-4">
        <LanguagePicker />
      </div>

      <!-- Social Links -->
      <div class="flex flex-wrap justify-center gap-4">
        <a href="#" class="text-gray-400 hover:text-white transition-colors">
          <Facebook class="w-6 h-6 fill-white" />
        </a>
        <a href="#" class="text-gray-400 hover:text-white transition-colors">
          <Xing class="w-6 h-6 fill-white" />
        </a>
        <a href="#" class="text-gray-400 hover:text-white transition-colors">
          <LinkedIn class="w-6 h-6 fill-white" />
        </a>
        <a href="#" class="text-gray-400 hover:text-white transition-colors">
          <Twitter class="w-6 h-6" />
        </a>
        <a href="#" class="text-gray-400 hover:text-white transition-colors">
          <Github class="w-6 h-6" />
        </a>
      </div>

      <!-- Legal Links -->
      <div class="text-center">
        <a href="#" class="text-sm text-gray-400 hover:text-white transition-colors">
          Impressum
        </a>
      </div>

      <!-- Copyright -->
      <div class="flex items-center justify-center gap-2 text-gray-400">
        <Copyright class="w-4 h-4" />
        <span class="text-sm">{currentYear}</span>
      </div>
    </footer>
  </div>
</aside>

<script>
  function setupMobileMenu() {
    let isTransitioning = false;
    const button = document.getElementById('mobile-menu-button');
    const sidebar = document.getElementById('sidebar');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const overlay = document.getElementById('sidebar-overlay');

    // Early return if any required elements are missing
    if (!button || !sidebar || !menuIcon || !closeIcon || !overlay) {
      console.error('Required mobile menu elements not found');
      return;
    }

    interface MenuElements {
      sidebar: HTMLElement;
      menuIcon: HTMLElement;
      closeIcon: HTMLElement;
      button: HTMLElement;
      overlay: HTMLElement;
    }

    // Store elements to avoid null checks
    const elements: MenuElements = {
      sidebar,
      menuIcon,
      closeIcon,
      button,
      overlay
    };

    function toggleMenu(elements: MenuElements) {
      console.log("toogle menu")
      const isOpen = elements.sidebar.classList.contains('translate-x-0');
      
      if (isOpen) {
        elements.sidebar.classList.remove('translate-x-0');
        elements.menuIcon.classList.remove('hidden');
        elements.closeIcon.classList.add('hidden');
        elements.overlay.classList.add('hidden');
        document.body.style.overflow = 'auto';
      } else {
        elements.sidebar.classList.add('translate-x-0');
        elements.menuIcon.classList.add('hidden');
        elements.closeIcon.classList.remove('hidden');
        elements.overlay.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    }

    
    elements.button.addEventListener('click', (e) => {
      e.stopImmediatePropagation()
      toggleMenu(elements);
    });

    // Close menu when clicking overlay
    elements.overlay.addEventListener('click', () => {
      toggleMenu(elements);
    });

    // Close menu on navigation
    const navLinks = elements.sidebar.querySelectorAll('a');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (elements.sidebar.classList.contains('translate-x-0')) {
          toggleMenu(elements);
        }
      });
    });

    // Handle resize
    let resizeTimeout: number | undefined;
    window.addEventListener('resize', () => {
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }
      resizeTimeout = window.setTimeout(() => {
        if (window.innerWidth >= 1024) { // lg breakpoint
          elements.sidebar.classList.remove('translate-x-0');
          elements.menuIcon.classList.remove('hidden');
          elements.closeIcon.classList.add('hidden');
          elements.overlay.classList.add('hidden');
          document.body.style.overflow = 'auto';
        }
      }, 100);
    });
  }

  // Setup on initial load
  setupMobileMenu();

  // Setup on view transitions
  document.addEventListener('astro:page-load', setupMobileMenu);
</script>

<style>
  /* Smooth transitions */
  #sidebar {
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
  }

  #sidebar-overlay {
    transition: opacity 0.3s ease-in-out;
  }

  /* Active link indicator */
  a.active::before {
    content: '';
    position: absolute;
    left: 0;
    width: 4px;
    height: 100%;
    background: theme('colors.cyan.500');
    border-radius: 0 4px 4px 0;
  }

  /* Icon styles */
  :global(svg) {
    @apply stroke-current;
  }

  /* Hover effects */
  @media (hover: hover) {
    .hover\:bg-gray-800\/50:hover {
      @apply transform transition-all duration-200;
    }
  }
</style>